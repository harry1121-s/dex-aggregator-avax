// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get reserve0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reserve1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class JoeRouter__addLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class JoeRouter__removeLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class JoeRouter__removeLiquidityAVAXResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class JoeRouter__removeLiquidityAVAXWithPermitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class JoeRouter__removeLiquidityWithPermitResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class JoeRouter extends ethereum.SmartContract {
  static bind(address: Address): JoeRouter {
    return new JoeRouter("JoeRouter", address);
  }

  WAVAX(): Address {
    let result = super.call("WAVAX", "WAVAX():(address)", []);

    return result[0].toAddress();
  }

  try_WAVAX(): ethereum.CallResult<Address> {
    let result = super.tryCall("WAVAX", "WAVAX():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addLiquidity(
    tokenA: Address,
    tokenB: Address,
    amountADesired: BigInt,
    amountBDesired: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): JoeRouter__addLiquidityResult {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(amountADesired),
        ethereum.Value.fromUnsignedBigInt(amountBDesired),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new JoeRouter__addLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_addLiquidity(
    tokenA: Address,
    tokenB: Address,
    amountADesired: BigInt,
    amountBDesired: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<JoeRouter__addLiquidityResult> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(amountADesired),
        ethereum.Value.fromUnsignedBigInt(amountBDesired),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new JoeRouter__addLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAmountIn(
    amountOut: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): BigInt {
    let result = super.call(
      "getAmountIn",
      "getAmountIn(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountIn(
    amountOut: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountIn",
      "getAmountIn(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountOut(
    amountIn: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): BigInt {
    let result = super.call(
      "getAmountOut",
      "getAmountOut(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountOut(
    amountIn: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountOut",
      "getAmountOut(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountsIn(amountOut: BigInt, path: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getAmountsIn",
      "getAmountsIn(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsIn(
    amountOut: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsIn",
      "getAmountsIn(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAmountsOut(amountIn: BigInt, path: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getAmountsOut",
      "getAmountsOut(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddressArray(path)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAmountsOut(
    amountIn: BigInt,
    path: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAmountsOut",
      "getAmountsOut(uint256,address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromAddressArray(path)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  quote(amountA: BigInt, reserveA: BigInt, reserveB: BigInt): BigInt {
    let result = super.call(
      "quote",
      "quote(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(reserveA),
        ethereum.Value.fromUnsignedBigInt(reserveB)
      ]
    );

    return result[0].toBigInt();
  }

  try_quote(
    amountA: BigInt,
    reserveA: BigInt,
    reserveB: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quote",
      "quote(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountA),
        ethereum.Value.fromUnsignedBigInt(reserveA),
        ethereum.Value.fromUnsignedBigInt(reserveB)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeLiquidity(
    tokenA: Address,
    tokenB: Address,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): JoeRouter__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new JoeRouter__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidity(
    tokenA: Address,
    tokenB: Address,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<JoeRouter__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new JoeRouter__removeLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityAVAX(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountAVAXMin: BigInt,
    to: Address,
    deadline: BigInt
  ): JoeRouter__removeLiquidityAVAXResult {
    let result = super.call(
      "removeLiquidityAVAX",
      "removeLiquidityAVAX(address,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountAVAXMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new JoeRouter__removeLiquidityAVAXResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityAVAX(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountAVAXMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<JoeRouter__removeLiquidityAVAXResult> {
    let result = super.tryCall(
      "removeLiquidityAVAX",
      "removeLiquidityAVAX(address,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountAVAXMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new JoeRouter__removeLiquidityAVAXResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityAVAXSupportingFeeOnTransferTokens(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountAVAXMin: BigInt,
    to: Address,
    deadline: BigInt
  ): BigInt {
    let result = super.call(
      "removeLiquidityAVAXSupportingFeeOnTransferTokens",
      "removeLiquidityAVAXSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountAVAXMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeLiquidityAVAXSupportingFeeOnTransferTokens(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountAVAXMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeLiquidityAVAXSupportingFeeOnTransferTokens",
      "removeLiquidityAVAXSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountAVAXMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeLiquidityAVAXWithPermit(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountAVAXMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): JoeRouter__removeLiquidityAVAXWithPermitResult {
    let result = super.call(
      "removeLiquidityAVAXWithPermit",
      "removeLiquidityAVAXWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountAVAXMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return new JoeRouter__removeLiquidityAVAXWithPermitResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityAVAXWithPermit(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountAVAXMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<JoeRouter__removeLiquidityAVAXWithPermitResult> {
    let result = super.tryCall(
      "removeLiquidityAVAXWithPermit",
      "removeLiquidityAVAXWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountAVAXMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new JoeRouter__removeLiquidityAVAXWithPermitResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountAVAXMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens",
      "removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountAVAXMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(
    token: Address,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountAVAXMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens",
      "removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountAVAXMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeLiquidityWithPermit(
    tokenA: Address,
    tokenB: Address,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): JoeRouter__removeLiquidityWithPermitResult {
    let result = super.call(
      "removeLiquidityWithPermit",
      "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return new JoeRouter__removeLiquidityWithPermitResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityWithPermit(
    tokenA: Address,
    tokenB: Address,
    liquidity: BigInt,
    amountAMin: BigInt,
    amountBMin: BigInt,
    to: Address,
    deadline: BigInt,
    approveMax: boolean,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<JoeRouter__removeLiquidityWithPermitResult> {
    let result = super.tryCall(
      "removeLiquidityWithPermit",
      "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountAMin),
        ethereum.Value.fromUnsignedBigInt(amountBMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBoolean(approveMax),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new JoeRouter__removeLiquidityWithPermitResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swapExactTokensForAVAX(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForAVAX",
      "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForAVAX(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForAVAX",
      "swapExactTokensForAVAX(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapExactTokensForTokens(
    amountIn: BigInt,
    amountOutMin: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapExactTokensForTokens",
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapTokensForExactAVAX(
    amountOut: BigInt,
    amountInMax: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapTokensForExactAVAX",
      "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapTokensForExactAVAX(
    amountOut: BigInt,
    amountInMax: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapTokensForExactAVAX",
      "swapTokensForExactAVAX(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  swapTokensForExactTokens(
    amountOut: BigInt,
    amountInMax: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_swapTokensForExactTokens(
    amountOut: BigInt,
    amountInMax: BigInt,
    path: Array<Address>,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "swapTokensForExactTokens",
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddressArray(path),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _WAVAX(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountADesired(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountBDesired(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountAMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amountBMin(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class AddLiquidityAVAXCall extends ethereum.Call {
  get inputs(): AddLiquidityAVAXCall__Inputs {
    return new AddLiquidityAVAXCall__Inputs(this);
  }

  get outputs(): AddLiquidityAVAXCall__Outputs {
    return new AddLiquidityAVAXCall__Outputs(this);
  }
}

export class AddLiquidityAVAXCall__Inputs {
  _call: AddLiquidityAVAXCall;

  constructor(call: AddLiquidityAVAXCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountTokenDesired(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountAVAXMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AddLiquidityAVAXCall__Outputs {
  _call: AddLiquidityAVAXCall;

  constructor(call: AddLiquidityAVAXCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountAVAX(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountAMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountBMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityAVAXCall extends ethereum.Call {
  get inputs(): RemoveLiquidityAVAXCall__Inputs {
    return new RemoveLiquidityAVAXCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityAVAXCall__Outputs {
    return new RemoveLiquidityAVAXCall__Outputs(this);
  }
}

export class RemoveLiquidityAVAXCall__Inputs {
  _call: RemoveLiquidityAVAXCall;

  constructor(call: RemoveLiquidityAVAXCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountAVAXMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RemoveLiquidityAVAXCall__Outputs {
  _call: RemoveLiquidityAVAXCall;

  constructor(call: RemoveLiquidityAVAXCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountAVAX(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall__Inputs {
    return new RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall__Outputs {
    return new RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall__Inputs {
  _call: RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall;

  constructor(call: RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountAVAXMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall__Outputs {
  _call: RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall;

  constructor(call: RemoveLiquidityAVAXSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get amountAVAX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveLiquidityAVAXWithPermitCall extends ethereum.Call {
  get inputs(): RemoveLiquidityAVAXWithPermitCall__Inputs {
    return new RemoveLiquidityAVAXWithPermitCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityAVAXWithPermitCall__Outputs {
    return new RemoveLiquidityAVAXWithPermitCall__Outputs(this);
  }
}

export class RemoveLiquidityAVAXWithPermitCall__Inputs {
  _call: RemoveLiquidityAVAXWithPermitCall;

  constructor(call: RemoveLiquidityAVAXWithPermitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountAVAXMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get approveMax(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class RemoveLiquidityAVAXWithPermitCall__Outputs {
  _call: RemoveLiquidityAVAXWithPermitCall;

  constructor(call: RemoveLiquidityAVAXWithPermitCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountAVAX(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall__Inputs {
    return new RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall__Outputs {
    return new RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall__Inputs {
  _call: RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall;

  constructor(
    call: RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall
  ) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountAVAXMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get approveMax(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall__Outputs {
  _call: RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall;

  constructor(
    call: RemoveLiquidityAVAXWithPermitSupportingFeeOnTransferTokensCall
  ) {
    this._call = call;
  }

  get amountAVAX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveLiquidityWithPermitCall extends ethereum.Call {
  get inputs(): RemoveLiquidityWithPermitCall__Inputs {
    return new RemoveLiquidityWithPermitCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityWithPermitCall__Outputs {
    return new RemoveLiquidityWithPermitCall__Outputs(this);
  }
}

export class RemoveLiquidityWithPermitCall__Inputs {
  _call: RemoveLiquidityWithPermitCall;

  constructor(call: RemoveLiquidityWithPermitCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountAMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountBMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get approveMax(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get v(): i32 {
    return this._call.inputValues[8].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[10].value.toBytes();
  }
}

export class RemoveLiquidityWithPermitCall__Outputs {
  _call: RemoveLiquidityWithPermitCall;

  constructor(call: RemoveLiquidityWithPermitCall) {
    this._call = call;
  }

  get amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapAVAXForExactTokensCall extends ethereum.Call {
  get inputs(): SwapAVAXForExactTokensCall__Inputs {
    return new SwapAVAXForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapAVAXForExactTokensCall__Outputs {
    return new SwapAVAXForExactTokensCall__Outputs(this);
  }
}

export class SwapAVAXForExactTokensCall__Inputs {
  _call: SwapAVAXForExactTokensCall;

  constructor(call: SwapAVAXForExactTokensCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapAVAXForExactTokensCall__Outputs {
  _call: SwapAVAXForExactTokensCall;

  constructor(call: SwapAVAXForExactTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactAVAXForTokensCall extends ethereum.Call {
  get inputs(): SwapExactAVAXForTokensCall__Inputs {
    return new SwapExactAVAXForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactAVAXForTokensCall__Outputs {
    return new SwapExactAVAXForTokensCall__Outputs(this);
  }
}

export class SwapExactAVAXForTokensCall__Inputs {
  _call: SwapExactAVAXForTokensCall;

  constructor(call: SwapExactAVAXForTokensCall) {
    this._call = call;
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapExactAVAXForTokensCall__Outputs {
  _call: SwapExactAVAXForTokensCall;

  constructor(call: SwapExactAVAXForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall__Inputs {
    return new SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall__Outputs {
    return new SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall__Inputs {
  _call: SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall__Outputs {
  _call: SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactAVAXForTokensSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }
}

export class SwapExactTokensForAVAXCall extends ethereum.Call {
  get inputs(): SwapExactTokensForAVAXCall__Inputs {
    return new SwapExactTokensForAVAXCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForAVAXCall__Outputs {
    return new SwapExactTokensForAVAXCall__Outputs(this);
  }
}

export class SwapExactTokensForAVAXCall__Inputs {
  _call: SwapExactTokensForAVAXCall;

  constructor(call: SwapExactTokensForAVAXCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForAVAXCall__Outputs {
  _call: SwapExactTokensForAVAXCall;

  constructor(call: SwapExactTokensForAVAXCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall__Inputs {
    return new SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall__Outputs {
    return new SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall__Inputs {
  _call: SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall__Outputs {
  _call: SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactTokensForAVAXSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }
}

export class SwapExactTokensForTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensCall__Inputs {
    return new SwapExactTokensForTokensCall__Inputs(this);
  }

  get outputs(): SwapExactTokensForTokensCall__Outputs {
    return new SwapExactTokensForTokensCall__Outputs(this);
  }
}

export class SwapExactTokensForTokensCall__Inputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForTokensCall__Outputs {
  _call: SwapExactTokensForTokensCall;

  constructor(call: SwapExactTokensForTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapExactTokensForTokensSupportingFeeOnTransferTokensCall extends ethereum.Call {
  get inputs(): SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Inputs {
    return new SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Inputs(
      this
    );
  }

  get outputs(): SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Outputs {
    return new SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Outputs(
      this
    );
  }
}

export class SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Inputs {
  _call: SwapExactTokensForTokensSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactTokensForTokensSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapExactTokensForTokensSupportingFeeOnTransferTokensCall__Outputs {
  _call: SwapExactTokensForTokensSupportingFeeOnTransferTokensCall;

  constructor(call: SwapExactTokensForTokensSupportingFeeOnTransferTokensCall) {
    this._call = call;
  }
}

export class SwapTokensForExactAVAXCall extends ethereum.Call {
  get inputs(): SwapTokensForExactAVAXCall__Inputs {
    return new SwapTokensForExactAVAXCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactAVAXCall__Outputs {
    return new SwapTokensForExactAVAXCall__Outputs(this);
  }
}

export class SwapTokensForExactAVAXCall__Inputs {
  _call: SwapTokensForExactAVAXCall;

  constructor(call: SwapTokensForExactAVAXCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountInMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapTokensForExactAVAXCall__Outputs {
  _call: SwapTokensForExactAVAXCall;

  constructor(call: SwapTokensForExactAVAXCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SwapTokensForExactTokensCall extends ethereum.Call {
  get inputs(): SwapTokensForExactTokensCall__Inputs {
    return new SwapTokensForExactTokensCall__Inputs(this);
  }

  get outputs(): SwapTokensForExactTokensCall__Outputs {
    return new SwapTokensForExactTokensCall__Outputs(this);
  }
}

export class SwapTokensForExactTokensCall__Inputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountInMax(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get path(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwapTokensForExactTokensCall__Outputs {
  _call: SwapTokensForExactTokensCall;

  constructor(call: SwapTokensForExactTokensCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}
